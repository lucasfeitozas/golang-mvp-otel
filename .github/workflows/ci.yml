name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Go Services
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies - Service A
      working-directory: ./service-a
      run: go mod download

    - name: Download dependencies - Service B
      working-directory: ./service-b
      run: go mod download

    - name: Run tests - Service A
      working-directory: ./service-a
      run: go test -v ./...

    - name: Run tests - Service B
      working-directory: ./service-b
      run: go test -v ./...

    - name: Build Service A
      working-directory: ./service-a
      run: go build -v ./...

    - name: Build Service B
      working-directory: ./service-b
      run: go build -v ./...

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint - Service A
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./service-a

    - name: golangci-lint - Service B
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./service-b

    - name: Check formatting - Service A
      working-directory: ./service-a
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

    - name: Check formatting - Service B
      working-directory: ./service-b
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Service A
      uses: docker/build-push-action@v5
      with:
        context: ./service-a
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/service-a:${{ github.sha }},${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/service-a:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Service B
      uses: docker/build-push-action@v5
      with:
        context: ./service-b
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/service-b:${{ github.sha }},${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/service-b:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file for testing
      run: |
        echo "WEATHER_API_KEY=test_key_for_ci" > .env

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 30

    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health 2>/dev/null; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8081/health 2>/dev/null; do sleep 2; done'

    - name: Run integration tests
      run: |
        # Test invalid CEP
        response=$(curl -s -X POST http://localhost:8080/cep -H "Content-Type: application/json" -d '{"cep": "00000000"}')
        echo "Invalid CEP response: $response"
        
        # Test Service A health
        curl -f http://localhost:8080/health
        
        # Test Service B health  
        curl -f http://localhost:8081/health

    - name: Check OpenTelemetry collector
      run: |
        docker logs otel-collector --tail 20

    - name: Check Zipkin
      run: |
        curl -f http://localhost:9411/api/v2/services

    - name: Stop services
      if: always()
      run: docker-compose down

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'